import{_ as h,c as l,m as t,b as i,w as d,K as e,V as a,o as s,a as n}from"./chunks/framework.DZLj5U16.js";const N=JSON.parse('{"title":"Loading CSV Files in Python","description":"","frontmatter":{},"headers":[],"relativePath":"ao3-2021/05-06-load-file.md","filePath":"ao3-2021/05-06-load-file.md"}'),r={name:"ao3-2021/05-06-load-file.md"},o=a(`<h1 id="loading-csv-files-in-python" tabindex="-1">Loading CSV Files in Python <a class="header-anchor" href="#loading-csv-files-in-python" aria-label="Permalink to &quot;Loading CSV Files in Python&quot;">​</a></h1><p>We have two pretty hefty csv files on hand, 554 MB and 923 MB respectively. It would take significant time for the program to load the entire file to the machine.</p><p>We could define nrows=5 to load first 5 rows of the file just to have an idea of how the data looks like.</p><h1 id="loading-first-5-rows" tabindex="-1">Loading first 5 rows <a class="header-anchor" href="#loading-first-5-rows" aria-label="Permalink to &quot;Loading first 5 rows&quot;">​</a></h1><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Load Python library</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pandas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Load first 5 rows </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pd.read_csv(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/pi/Downloads/works-20210226.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nrows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,5),p=t("pre",null,[t("code",null,`.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
`)],-1),k=a('<table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>creation date</th><th>language</th><th>restricted</th><th>complete</th><th>word_count</th><th>tags</th><th>Unnamed: 6</th></tr></thead><tbody><tr><th>0</th><td>2021-02-26</td><td>en</td><td>False</td><td>True</td><td>388</td><td>10+414093+1001939+4577144+1499536+110+4682892+...</td><td>NaN</td></tr><tr><th>1</th><td>2021-02-26</td><td>en</td><td>False</td><td>True</td><td>1638</td><td>10+20350917+34816907+23666027+23269305+2326930...</td><td>NaN</td></tr><tr><th>2</th><td>2021-02-26</td><td>en</td><td>False</td><td>True</td><td>1502</td><td>10+10613413+9780526+3763877+3741104+7657229+30...</td><td>NaN</td></tr><tr><th>3</th><td>2021-02-26</td><td>en</td><td>False</td><td>True</td><td>100</td><td>10+15322+54862755+20595867+32994286+663+471751...</td><td>NaN</td></tr><tr><th>4</th><td>2021-02-26</td><td>en</td><td>False</td><td>True</td><td>994</td><td>11+721553+54604+1439500+3938423+53483274+54862...</td><td>NaN</td></tr></tbody></table>',1),c=a('<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pd.read_csv(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/pi/Downloads/tags-20210226.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nrows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>',1),g=t("pre",null,[t("code",null,`.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
`)],-1),_=a('<table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>id</th><th>type</th><th>name</th><th>canonical</th><th>cached_count</th><th>merger_id</th></tr></thead><tbody><tr><th>0</th><td>1</td><td>Media</td><td>TV Shows</td><td>True</td><td>910</td><td>NaN</td></tr><tr><th>1</th><td>2</td><td>Media</td><td>Movies</td><td>True</td><td>1164</td><td>NaN</td></tr><tr><th>2</th><td>3</td><td>Media</td><td>Books &amp; Literature</td><td>True</td><td>134</td><td>NaN</td></tr><tr><th>3</th><td>4</td><td>Media</td><td>Cartoons &amp; Comics &amp; Graphic Novels</td><td>True</td><td>166</td><td>NaN</td></tr><tr><th>4</th><td>5</td><td>Media</td><td>Anime &amp; Manga</td><td>True</td><td>501</td><td>NaN</td></tr></tbody></table>',1),y=a(`<h1 id="loading-entire-file" tabindex="-1">Loading Entire File <a class="header-anchor" href="#loading-entire-file" aria-label="Permalink to &quot;Loading Entire File&quot;">​</a></h1><p>There are additional steps to take so that we can save memory and potentially speed up the loading process. Jupyter Notebook takes about 54 seconds to read the file on my machine, so be prepared that it might take significant time.</p><p>We&#39;ll use chunksize=10000 to save memory by reading chunks of the file at a time, then use pd.concat() to concatenate the chunks.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The file is too large</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># save memory by reading chunks of the file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.read_csv(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/pi/Downloads/works-20210226.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunksize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Combine chunks into a dataframe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">works </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.concat(chunker, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ignore_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># First 5 rows</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">works.iloc[:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,:]</span></span></code></pre></div>`,6),u=t("pre",null,[t("code",null,`.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
`)],-1),E=a('<table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>creation date</th><th>language</th><th>restricted</th><th>complete</th><th>word_count</th><th>tags</th><th>Unnamed: 6</th></tr></thead><tbody><tr><th>0</th><td>2021-02-26</td><td>en</td><td>False</td><td>True</td><td>388.0</td><td>10+414093+1001939+4577144+1499536+110+4682892+...</td><td>NaN</td></tr><tr><th>1</th><td>2021-02-26</td><td>en</td><td>False</td><td>True</td><td>1638.0</td><td>10+20350917+34816907+23666027+23269305+2326930...</td><td>NaN</td></tr><tr><th>2</th><td>2021-02-26</td><td>en</td><td>False</td><td>True</td><td>1502.0</td><td>10+10613413+9780526+3763877+3741104+7657229+30...</td><td>NaN</td></tr><tr><th>3</th><td>2021-02-26</td><td>en</td><td>False</td><td>True</td><td>100.0</td><td>10+15322+54862755+20595867+32994286+663+471751...</td><td>NaN</td></tr><tr><th>4</th><td>2021-02-26</td><td>en</td><td>False</td><td>True</td><td>994.0</td><td>11+721553+54604+1439500+3938423+53483274+54862...</td><td>NaN</td></tr></tbody></table>',1);function m(f,T,b,v,F,A){return s(),l("div",null,[o,t("div",null,[(s(),i(e("style"),null,{default:d(()=>[n(" .dataframe tbody tr th:only-of-type { vertical-align: middle; } "),p]),_:1})),k]),c,t("div",null,[(s(),i(e("style"),null,{default:d(()=>[n(" .dataframe tbody tr th:only-of-type { vertical-align: middle; } "),g]),_:1})),_]),y,t("div",null,[(s(),i(e("style"),null,{default:d(()=>[n(" .dataframe tbody tr th:only-of-type { vertical-align: middle; } "),u]),_:1})),E])])}const D=h(r,[["render",m]]);export{N as __pageData,D as default};
