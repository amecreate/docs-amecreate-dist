import{_ as h,c as p,m as s,b as t,w as n,K as e,V as a,o as i,a as l}from"./chunks/framework.DZLj5U16.js";const r="/docs/assets/05-08-group-by_23_0.DabJXOSc.png",S=JSON.parse('{"title":"Unique Values, Groupby, and 5 Most Popular Languages on AO3","description":"","frontmatter":{},"headers":[],"relativePath":"ao3-2021/05-08-group-by.md","filePath":"ao3-2021/05-08-group-by.md"}'),o={name:"ao3-2021/05-08-group-by.md"},d=a(`<h1 id="unique-values-groupby-and-5-most-popular-languages-on-ao3" tabindex="-1">Unique Values, Groupby, and 5 Most Popular Languages on AO3 <a class="header-anchor" href="#unique-values-groupby-and-5-most-popular-languages-on-ao3" aria-label="Permalink to &quot;Unique Values, Groupby, and 5 Most Popular Languages on AO3&quot;">​</a></h1><p>tags: Python Pandas Seaborn</p><p>Continue with data cleaning, and a little bit of data analysis. Find the 5 most popular languages on AO3.</p><nav class="table-of-contents"><ul><li><a href="#loading-file">Loading File</a></li><li><a href="#selecting-columns">Selecting Columns</a></li><li><a href="#unique-values-and-language-options">Unique Values and Language Options</a></li><li><a href="#value-counts-for-series">Value_counts for Series</a></li><li><a href="#groupby-for-dataframe">Groupby for DataFrame</a></li><li><a href="#top-5-most-popular-languages-on-ao3">Top 5 Most Popular Languages on AO3</a></li><li><a href="#simple-graph-with-seaborn-library">Simple Graph with Seaborn Library</a></li></ul></nav><h2 id="loading-file" tabindex="-1">Loading File <a class="header-anchor" href="#loading-file" aria-label="Permalink to &quot;Loading File&quot;">​</a></h2><p>For details on how to load large csv files in Python, check out <a href="./05-06-load-file.html">Loading CSV Files in Python</a>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Load Python library</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pandas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Load file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/pi/Downloads/works-20210226.csv&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.read_csv(path, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunksize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">works </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.concat(chunker, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ignore_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="selecting-columns" tabindex="-1">Selecting Columns <a class="header-anchor" href="#selecting-columns" aria-label="Permalink to &quot;Selecting Columns&quot;">​</a></h2><p>We need the language column to find out top 5 most popular languages on AO3. Let&#39;s create a new Series called &quot;language&quot;.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Select language col</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> works.language</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Drop NA values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> language.dropna()</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Data set preview</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">language</span></span></code></pre></div><pre><code>0          en
1          en
2          en
3          en
4          en
           ..
7269688    en
7269689    en
7269690    en
7269691    en
7269692    en
Name: language, Length: 7269603, dtype: object
</code></pre><h2 id="unique-values-and-language-options" tabindex="-1">Unique Values and Language Options <a class="header-anchor" href="#unique-values-and-language-options" aria-label="Permalink to &quot;Unique Values and Language Options&quot;">​</a></h2><p>Using <code>unique()</code> to simply find out the list of languages available in the data set. We should keep in mind that there are more language options available on AO3. What we have here are languages with at least one work created in that language. Some languages do not currently have a work thus are not included in this data set.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find all language options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">language.unique()</span></span></code></pre></div><pre><code>array([&#39;en&#39;, &#39;zh&#39;, &#39;de&#39;, &#39;fr&#39;, &#39;es&#39;, &#39;ptBR&#39;, &#39;id&#39;, &#39;ru&#39;, &#39;yue&#39;, &#39;bos&#39;,
       &#39;pl&#39;, &#39;ptPT&#39;, &#39;fil&#39;, &#39;vi&#39;, &#39;it&#39;, &#39;ms&#39;, &#39;ja&#39;, &#39;nl&#39;, &#39;hu&#39;, &#39;hak&#39;,
       &#39;be&#39;, &#39;ro&#39;, &#39;cs&#39;, &#39;et&#39;, &#39;ko&#39;, &#39;th&#39;, &#39;wuu&#39;, &#39;fi&#39;, &#39;sv&#39;, &#39;el&#39;, &#39;afr&#39;,
       &#39;sq&#39;, &#39;qtp&#39;, &#39;fa&#39;, &#39;hr&#39;, &#39;bg&#39;, &#39;ca&#39;, &#39;uk&#39;, &#39;sco&#39;, &#39;lv&#39;, &#39;ga&#39;, &#39;tr&#39;,
       &#39;ar&#39;, &#39;hy&#39;, &#39;fur&#39;, &#39;lt&#39;, &#39;eu&#39;, &#39;so&#39;, &#39;mk&#39;, &#39;si&#39;, &#39;he&#39;, &#39;da&#39;, &#39;sk&#39;,
       &#39;bn&#39;, &#39;arc&#39;, &#39;ia&#39;, &#39;slv&#39;, &#39;chn&#39;, &#39;br&#39;, &#39;no&#39;, &#39;hi&#39;, &#39;eo&#39;, &#39;mnc&#39;,
       &#39;cy&#39;, &#39;hau&#39;, &#39;gl&#39;, &#39;ta&#39;, &#39;qkz&#39;, &#39;bod&#39;, &#39;mr&#39;, &#39;tlh&#39;, &#39;la&#39;, &#39;zu&#39;,
       &#39;tqx&#39;, &#39;qya&#39;, &#39;gem&#39;, &#39;sjn&#39;, &#39;fcs&#39;, &#39;kat&#39;, &#39;sw&#39;, &#39;sr&#39;, &#39;is&#39;, &#39;pa&#39;,
       &#39;gd&#39;, &#39;jv&#39;], dtype=object)
</code></pre><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find the total number of languages</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(language.unique())</span></span></code></pre></div><pre><code>85
</code></pre><p>To summarize, we have 85 languages present in the data set. In comparison, you can browse the entire <a href="https://archiveofourown.org/languages" target="_blank" rel="noreferrer">language options</a> on AO3 website.</p><h2 id="value-counts-for-series" tabindex="-1">Value_counts for Series <a class="header-anchor" href="#value-counts-for-series" aria-label="Permalink to &quot;Value_counts for Series&quot;">​</a></h2><p><code>Value_counts()</code> is limited to a Series and returns the frequencies of values. We can use it fo find the number of works in each language. For more complex DataFrame structures, <code>Groupby()</code> is used. More on that later.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find number of works in each language</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">language.value_counts()</span></span></code></pre></div><pre><code>en     6587693
zh      335179
ru      136724
es       70645
fr       32145
        ...   
hau          1
jv           1
zu           1
mnc          1
fur          1
Name: language, Length: 85, dtype: int64
</code></pre><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Combine the results into a new DataFrame</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Disable key as index with reset_index() </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rename columns</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> language.value_counts().reset_index()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top_list.columns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;language&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;work_count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top_list</span></span></code></pre></div>`,24),k=s("pre",null,[s("code",null,`.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
`)],-1),g=a('<table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>language</th><th>work_count</th></tr></thead><tbody><tr><th>0</th><td>en</td><td>6587693</td></tr><tr><th>1</th><td>zh</td><td>335179</td></tr><tr><th>2</th><td>ru</td><td>136724</td></tr><tr><th>3</th><td>es</td><td>70645</td></tr><tr><th>4</th><td>fr</td><td>32145</td></tr><tr><th>...</th><td>...</td><td>...</td></tr><tr><th>80</th><td>hau</td><td>1</td></tr><tr><th>81</th><td>jv</td><td>1</td></tr><tr><th>82</th><td>zu</td><td>1</td></tr><tr><th>83</th><td>mnc</td><td>1</td></tr><tr><th>84</th><td>fur</td><td>1</td></tr></tbody></table><p>85 rows × 2 columns</p>',2),u=a(`<h2 id="groupby-for-dataframe" tabindex="-1">Groupby for DataFrame <a class="header-anchor" href="#groupby-for-dataframe" aria-label="Permalink to &quot;Groupby for DataFrame&quot;">​</a></h2><p><code>Groupby</code> is used to split the data set into groups, compute a summary statistic for each group, and combine the results into a new data structure.</p><p>Here, we are going to split the data set into different languages, compute how many works (instances) under each language, and sort the data set so we can find top 5 most popular languages.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># group the language column by counting each language</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">works.groupby([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;language&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]).size()</span></span></code></pre></div><pre><code>language
afr        38
ar         49
arc         6
be         52
bg         67
        ...  
vi       2178
wuu        46
yue       369
zh     335179
zu          1
Length: 85, dtype: int64
</code></pre><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Combine the results into a new DataFrame</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Disable key as index with reset_index() </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rename columns</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Sort in descending order, modify the existing df with inplace=True</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Update index using ignore_index=True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top_list2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> works.groupby([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;language&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]).size().reset_index()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top_list2.columns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;language&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;work_count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top_list2.sort_values(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;work_count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ascending</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inplace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ignore_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top_list2</span></span></code></pre></div>`,6),c=s("pre",null,[s("code",null,`.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
`)],-1),y=a('<table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>language</th><th>work_count</th></tr></thead><tbody><tr><th>0</th><td>en</td><td>6587693</td></tr><tr><th>1</th><td>zh</td><td>335179</td></tr><tr><th>2</th><td>ru</td><td>136724</td></tr><tr><th>3</th><td>es</td><td>70645</td></tr><tr><th>4</th><td>fr</td><td>32145</td></tr><tr><th>...</th><td>...</td><td>...</td></tr><tr><th>80</th><td>fcs</td><td>1</td></tr><tr><th>81</th><td>fur</td><td>1</td></tr><tr><th>82</th><td>kat</td><td>1</td></tr><tr><th>83</th><td>pa</td><td>1</td></tr><tr><th>84</th><td>zu</td><td>1</td></tr></tbody></table><p>85 rows × 2 columns</p>',2),E=a(`<p>We have achieved the same results as using <code>value_counts()</code>. We&#39;ll use more <code>groupby()</code> function when we add the creaton_date column and analyze language trend. More on that later. Let&#39;s find out the top 5 most popular languages on AO3.</p><h2 id="top-5-most-popular-languages-on-ao3" tabindex="-1">Top 5 Most Popular Languages on AO3 <a class="header-anchor" href="#top-5-most-popular-languages-on-ao3" aria-label="Permalink to &quot;Top 5 Most Popular Languages on AO3&quot;">​</a></h2><p>As shown in previous steps, we have prepared a clean, organized DataFrame called top_list for data analysis and visualization. Let&#39;s extract the top 5 rows into a new DataFrame called top5.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Top 5 rows</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top_list[:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].copy()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top5</span></span></code></pre></div>`,4),b=s("pre",null,[s("code",null,`.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
`)],-1),_=a('<table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>language</th><th>work_count</th></tr></thead><tbody><tr><th>0</th><td>en</td><td>6587693</td></tr><tr><th>1</th><td>zh</td><td>335179</td></tr><tr><th>2</th><td>ru</td><td>136724</td></tr><tr><th>3</th><td>es</td><td>70645</td></tr><tr><th>4</th><td>fr</td><td>32145</td></tr></tbody></table>',1),m=a(`<p>In top5, we have the all-time most popular languages on AO3 (at the time of this writing) and the number of works in each language. Let&#39;s create a simple visualization to display the data.</p><h2 id="simple-graph-with-seaborn-library" tabindex="-1">Simple Graph with Seaborn Library <a class="header-anchor" href="#simple-graph-with-seaborn-library" aria-label="Permalink to &quot;Simple Graph with Seaborn Library&quot;">​</a></h2><p>There are several ways to plot graphs in Python, such as <a href="https://matplotlib.org/" target="_blank" rel="noreferrer">Matplotlib</a>, <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html" target="_blank" rel="noreferrer">Pandas Plot</a>, and <a href="https://seaborn.pydata.org/" target="_blank" rel="noreferrer">Seaborn</a>, the latter two are based on matplotlib. Depending on the complexity of the graph, you can choose to use either one of the libraries.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Import libraries</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Top line is Jupyter Notebook specific</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">matplotlib inline</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matplotlib.pyplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> seaborn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sns</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Plot using Seaborn library</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Prevent scientific notation with ticklabel_format()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sns.barplot(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;language&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;work_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top5)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax.ticklabel_format(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><img src="`+r+'" alt="png"></p>',6);function F(A,f,v,D,C,w){return i(),p("div",null,[d,s("div",null,[(i(),t(e("style"),null,{default:n(()=>[l(" .dataframe tbody tr th:only-of-type { vertical-align: middle; } "),k]),_:1})),g]),u,s("div",null,[(i(),t(e("style"),null,{default:n(()=>[l(" .dataframe tbody tr th:only-of-type { vertical-align: middle; } "),c]),_:1})),y]),E,s("div",null,[(i(),t(e("style"),null,{default:n(()=>[l(" .dataframe tbody tr th:only-of-type { vertical-align: middle; } "),b]),_:1})),_]),m])}const q=h(o,[["render",F]]);export{S as __pageData,q as default};
